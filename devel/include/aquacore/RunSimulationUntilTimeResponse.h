// Generated by gencpp from file aquacore/RunSimulationUntilTimeResponse.msg
// DO NOT EDIT!


#ifndef AQUACORE_MESSAGE_RUNSIMULATIONUNTILTIMERESPONSE_H
#define AQUACORE_MESSAGE_RUNSIMULATIONUNTILTIMERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Imu.h>

namespace aquacore
{
template <class ContainerAllocator>
struct RunSimulationUntilTimeResponse_
{
  typedef RunSimulationUntilTimeResponse_<ContainerAllocator> Type;

  RunSimulationUntilTimeResponse_()
    : timestamp()
    , frequencies()
    , amplitudes()
    , leg_offsets()
    , phase_offsets()
    , joint_angles()
    , imu_data()
    , integrated_velocity()  {
      frequencies.assign(0.0);

      amplitudes.assign(0.0);

      leg_offsets.assign(0.0);

      phase_offsets.assign(0.0);

      joint_angles.assign(0.0);

      integrated_velocity.assign(0.0);
  }
  RunSimulationUntilTimeResponse_(const ContainerAllocator& _alloc)
    : timestamp()
    , frequencies()
    , amplitudes()
    , leg_offsets()
    , phase_offsets()
    , joint_angles()
    , imu_data(_alloc)
    , integrated_velocity()  {
  (void)_alloc;
      frequencies.assign(0.0);

      amplitudes.assign(0.0);

      leg_offsets.assign(0.0);

      phase_offsets.assign(0.0);

      joint_angles.assign(0.0);

      integrated_velocity.assign(0.0);
  }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef boost::array<double, 6>  _frequencies_type;
  _frequencies_type frequencies;

   typedef boost::array<double, 6>  _amplitudes_type;
  _amplitudes_type amplitudes;

   typedef boost::array<double, 6>  _leg_offsets_type;
  _leg_offsets_type leg_offsets;

   typedef boost::array<double, 6>  _phase_offsets_type;
  _phase_offsets_type phase_offsets;

   typedef boost::array<double, 6>  _joint_angles_type;
  _joint_angles_type joint_angles;

   typedef  ::sensor_msgs::Imu_<ContainerAllocator>  _imu_data_type;
  _imu_data_type imu_data;

   typedef boost::array<double, 3>  _integrated_velocity_type;
  _integrated_velocity_type integrated_velocity;




  typedef boost::shared_ptr< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RunSimulationUntilTimeResponse_

typedef ::aquacore::RunSimulationUntilTimeResponse_<std::allocator<void> > RunSimulationUntilTimeResponse;

typedef boost::shared_ptr< ::aquacore::RunSimulationUntilTimeResponse > RunSimulationUntilTimeResponsePtr;
typedef boost::shared_ptr< ::aquacore::RunSimulationUntilTimeResponse const> RunSimulationUntilTimeResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aquacore

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'aquacore': ['/home/ran/Documents/Assignment1/src/aquacore/msg', '/home/ran/Documents/Assignment1/devel/share/aquacore/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95407e38eb7e3d32da22f30447fb9d6c";
  }

  static const char* value(const ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95407e38eb7e3d32ULL;
  static const uint64_t static_value2 = 0xda22f30447fb9d6cULL;
};

template<class ContainerAllocator>
struct DataType< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aquacore/RunSimulationUntilTimeResponse";
  }

  static const char* value(const ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp\n\
float64[6] frequencies\n\
float64[6] amplitudes\n\
float64[6] leg_offsets\n\
float64[6] phase_offsets\n\
float64[6] joint_angles\n\
sensor_msgs/Imu imu_data\n\
float64[3] integrated_velocity\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Imu\n\
# This is a message to hold data from an IMU (Inertial Measurement Unit)\n\
#\n\
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n\
#\n\
# If the covariance of the measurement is known, it should be filled in (if all you know is the \n\
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n\
# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n\
# data a covariance will have to be assumed or gotten from some other source\n\
#\n\
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n\
# estimate), please set element 0 of the associated covariance matrix to -1\n\
# If you are interpreting this message, please check for a value of -1 in the first element of each \n\
# covariance matrix, and disregard the associated estimate.\n\
\n\
Header header\n\
\n\
geometry_msgs/Quaternion orientation\n\
float64[9] orientation_covariance # Row major about x, y, z axes\n\
\n\
geometry_msgs/Vector3 angular_velocity\n\
float64[9] angular_velocity_covariance # Row major about x, y, z axes\n\
\n\
geometry_msgs/Vector3 linear_acceleration\n\
float64[9] linear_acceleration_covariance # Row major x, y z \n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.frequencies);
      stream.next(m.amplitudes);
      stream.next(m.leg_offsets);
      stream.next(m.phase_offsets);
      stream.next(m.joint_angles);
      stream.next(m.imu_data);
      stream.next(m.integrated_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RunSimulationUntilTimeResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aquacore::RunSimulationUntilTimeResponse_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "frequencies[]" << std::endl;
    for (size_t i = 0; i < v.frequencies.size(); ++i)
    {
      s << indent << "  frequencies[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.frequencies[i]);
    }
    s << indent << "amplitudes[]" << std::endl;
    for (size_t i = 0; i < v.amplitudes.size(); ++i)
    {
      s << indent << "  amplitudes[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.amplitudes[i]);
    }
    s << indent << "leg_offsets[]" << std::endl;
    for (size_t i = 0; i < v.leg_offsets.size(); ++i)
    {
      s << indent << "  leg_offsets[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.leg_offsets[i]);
    }
    s << indent << "phase_offsets[]" << std::endl;
    for (size_t i = 0; i < v.phase_offsets.size(); ++i)
    {
      s << indent << "  phase_offsets[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.phase_offsets[i]);
    }
    s << indent << "joint_angles[]" << std::endl;
    for (size_t i = 0; i < v.joint_angles.size(); ++i)
    {
      s << indent << "  joint_angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_angles[i]);
    }
    s << indent << "imu_data: ";
    s << std::endl;
    Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "  ", v.imu_data);
    s << indent << "integrated_velocity[]" << std::endl;
    for (size_t i = 0; i < v.integrated_velocity.size(); ++i)
    {
      s << indent << "  integrated_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.integrated_velocity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AQUACORE_MESSAGE_RUNSIMULATIONUNTILTIMERESPONSE_H
