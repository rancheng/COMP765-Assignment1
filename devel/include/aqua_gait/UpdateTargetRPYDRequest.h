// Generated by gencpp from file aqua_gait/UpdateTargetRPYDRequest.msg
// DO NOT EDIT!


#ifndef AQUA_GAIT_MESSAGE_UPDATETARGETRPYDREQUEST_H
#define AQUA_GAIT_MESSAGE_UPDATETARGETRPYDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aqua_gait
{
template <class ContainerAllocator>
struct UpdateTargetRPYDRequest_
{
  typedef UpdateTargetRPYDRequest_<ContainerAllocator> Type;

  UpdateTargetRPYDRequest_()
    : target_roll_deg(0.0)
    , target_pitch_deg(0.0)
    , target_yaw_deg(0.0)
    , target_depth_m(0.0)  {
    }
  UpdateTargetRPYDRequest_(const ContainerAllocator& _alloc)
    : target_roll_deg(0.0)
    , target_pitch_deg(0.0)
    , target_yaw_deg(0.0)
    , target_depth_m(0.0)  {
  (void)_alloc;
    }



   typedef double _target_roll_deg_type;
  _target_roll_deg_type target_roll_deg;

   typedef double _target_pitch_deg_type;
  _target_pitch_deg_type target_pitch_deg;

   typedef double _target_yaw_deg_type;
  _target_yaw_deg_type target_yaw_deg;

   typedef double _target_depth_m_type;
  _target_depth_m_type target_depth_m;




  typedef boost::shared_ptr< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateTargetRPYDRequest_

typedef ::aqua_gait::UpdateTargetRPYDRequest_<std::allocator<void> > UpdateTargetRPYDRequest;

typedef boost::shared_ptr< ::aqua_gait::UpdateTargetRPYDRequest > UpdateTargetRPYDRequestPtr;
typedef boost::shared_ptr< ::aqua_gait::UpdateTargetRPYDRequest const> UpdateTargetRPYDRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aqua_gait

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67eb34f7772a72c0462945d31ff2da84";
  }

  static const char* value(const ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67eb34f7772a72c0ULL;
  static const uint64_t static_value2 = 0x462945d31ff2da84ULL;
};

template<class ContainerAllocator>
struct DataType< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aqua_gait/UpdateTargetRPYDRequest";
  }

  static const char* value(const ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 target_roll_deg\n\
float64 target_pitch_deg\n\
float64 target_yaw_deg\n\
float64 target_depth_m\n\
\n\
";
  }

  static const char* value(const ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_roll_deg);
      stream.next(m.target_pitch_deg);
      stream.next(m.target_yaw_deg);
      stream.next(m.target_depth_m);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdateTargetRPYDRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aqua_gait::UpdateTargetRPYDRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_roll_deg: ";
    Printer<double>::stream(s, indent + "  ", v.target_roll_deg);
    s << indent << "target_pitch_deg: ";
    Printer<double>::stream(s, indent + "  ", v.target_pitch_deg);
    s << indent << "target_yaw_deg: ";
    Printer<double>::stream(s, indent + "  ", v.target_yaw_deg);
    s << indent << "target_depth_m: ";
    Printer<double>::stream(s, indent + "  ", v.target_depth_m);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AQUA_GAIT_MESSAGE_UPDATETARGETRPYDREQUEST_H
